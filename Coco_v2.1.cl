(defpackage :2302_P02_aaf45;
(:use :common-lisp :conecta4)
(:export :heuristica :*alias*))
(in-package 2302_P02_aaf45)

(defvar *alias* '|Coco_v2.1|)

(defun heuristica (estado)
; current player standpoint
(let* ((tablero (estado-tablero estado))
 (ficha-actual (estado-turno estado))
 (ficha-oponente (siguiente-jugador ficha-actual)))
  (if (juego-terminado-p estado)
(let ((ganador (ganador estado)))
  (cond ((not ganador) 0)
	((eql ganador ficha-actual) +val-max+)
	(t +val-min+)))
	(let ((puntuacion-actual 0)
	(puntuacion-oponente 0))
(loop for columna from 0 below (tablero-ancho tablero) do
	  (let* ((altura (altura-columna tablero columna))
		 (fila (1- altura))
		 (vertical (contar-vertical tablero ficha-actual columna fila))
		 (horizontal (contar-horizontal tablero ficha-actual columna fila))
		 (diagonal-ascendente (contar-diagonal-ascendente tablero ficha-actual columna fila))
		 (diagonal-descendente (contar-diagonal-descendente tablero ficha-actual columna fila))
		 (vertical-espacios (contar-vertical-espacios tablero ficha-actual ficha-oponente columna fila))
		 (horizontal-espacios (contar-horizontal-espacios tablero ficha-actual ficha-oponente columna fila))
		 (diagonal-ascendente-espacios (contar-diagonal-ascendente-espacios tablero ficha-actual ficha-oponente columna fila))
		 (diagonal-descendente-espacios (contar-diagonal-descendente-espacios tablero ficha-actual ficha-oponente columna fila))
		 (total-esp (+ vertical-espacios horizontal-espacios diagonal-ascendente-espacios diagonal-descendente-espacios)))
	(setf puntuacion-actual
		  (+
		 (cond ((= vertical 0) 0)       ;; empleamos una heur√≠stica optimista (prioriza beneficio propio frente a fastidiar al rival)
			   ((= vertical 1) 10)
			   ((= vertical 2) 400)
			   ((= vertical 3) 1200))
		 (cond ((= horizontal 0) 0)
			   ((= horizontal 1) 10)
			   ((= horizontal 2) 400)
			   ((= horizontal 3) 1200))
		 (cond ((= diagonal-ascendente 0) 0)
			   ((= diagonal-ascendente 1) 10)
			   ((= diagonal-ascendente 2) 400)
			   ((= diagonal-ascendente 3) 1200))
		 (cond ((= diagonal-descendente 0) 0)
			   ((= diagonal-descendente 1) 10)
			   ((= diagonal-descendente 2) 400)
			   ((= diagonal-descendente 3) 1200))
		 (* total-esp 500))))
	  (let* ((altura (altura-columna tablero columna))
		 (fila (1- altura))
		 (vertical (contar-vertical tablero ficha-oponente columna fila))
		 (horizontal (contar-horizontal tablero ficha-oponente columna fila))
		 (diagonal-ascendente (contar-diagonal-ascendente tablero ficha-oponente columna fila))
		 (diagonal-descendente (contar-diagonal-descendente tablero ficha-oponente columna fila))
		 (vertical-espacios (contar-vertical-espacios tablero ficha-oponente ficha-actual columna fila))
		 (horizontal-espacios (contar-horizontal-espacios tablero ficha-oponente ficha-actual columna fila))
		 (diagonal-ascendente-espacios (contar-diagonal-ascendente-espacios tablero ficha-oponente ficha-actual columna fila))
		 (diagonal-descendente-espacios (contar-diagonal-descendente-espacios tablero ficha-oponente ficha-actual columna fila))
		 (total-esp (+ vertical-espacios horizontal-espacios diagonal-ascendente-espacios diagonal-descendente-espacios)))
	(setf puntuacion-oponente
		  (+
		 (cond ((= vertical 0) 0)       ;; Priorizamos el caso el caso en el que tenemos varias nuestras debajo
			   ((= vertical 1) 10)
			   ((= vertical 2) 300)
			   ((= vertical 3) 1000))
		 (cond ((= horizontal 0) 0)
			   ((= horizontal 1) 10)
			   ((= horizontal 2) 400)
			   ((= horizontal 3) 1000))
		 (cond ((= diagonal-ascendente 0) 0)
			   ((= diagonal-ascendente 1) 10)
			   ((= diagonal-ascendente 2) 300)
			   ((= diagonal-ascendente 3) 1000))
		 (cond ((= diagonal-descendente 0) 0)
			   ((= diagonal-descendente 1) 10)
			   ((= diagonal-descendente 2) 300)
			   ((= diagonal-descendente 3) 1000))
		 (* total-esp 350)))))
	(- puntuacion-actual puntuacion-oponente)))))

(defun contar-horizontal (tablero ficha columna fila)
  (+ (contar-derecha tablero ficha columna fila)
     (contar-izquierda tablero ficha (1- columna) fila)))

(defun contar-vertical (tablero ficha columna fila)
  (+ (contar-abajo tablero ficha columna fila)
     (contar-arriba tablero ficha columna (1+ fila))))
  
(defun contar-diagonal-ascendente (tablero ficha columna fila)
  (+ (contar-abajo-izquierda tablero ficha columna fila)
     (contar-arriba-derecha tablero ficha (1+ columna) (1+ fila))))
  
(defun contar-diagonal-descendente (tablero ficha columna fila)
  (+ (contar-abajo-derecha tablero ficha columna fila)
     (contar-arriba-izquierda tablero ficha (1- columna) (1+ fila))))

(defun contar-horizontal-espacios (tablero ficha ficha-oponente columna fila)
  (+ (contar-derecha-espacios tablero ficha ficha-oponente columna fila)
     (contar-izquierda-espacios tablero ficha ficha-oponente (1- columna) fila)))

(defun contar-vertical-espacios (tablero ficha ficha-oponente columna fila)
  (+ (contar-abajo-espacios tablero ficha ficha-oponente columna fila)
     (contar-arriba-espacios tablero ficha ficha-oponente columna (1+ fila))))
  
(defun contar-diagonal-ascendente-espacios (tablero ficha ficha-oponente columna fila)
  (+ (contar-abajo-izquierda-espacios tablero ficha ficha-oponente columna fila)
     (contar-arriba-derecha-espacios tablero ficha ficha-oponente (1+ columna) (1+ fila))))
  
(defun contar-diagonal-descendente-espacios (tablero ficha ficha-oponente columna fila)
  (+ (contar-abajo-derecha-espacios tablero ficha ficha-oponente columna fila)
     (contar-arriba-izquierda-espacios tablero ficha ficha-oponente (1- columna) (1+ fila))))

(defun contar-abajo-espacios (tablero ficha ficha-oponente columna fila)
 	(if (dentro-del-tablero-p tablero columna fila)
 		(cond 
 			((eql (obtener-ficha tablero columna fila) ficha)
 				(1+ (contar-abajo-espacios tablero ficha ficha-oponente columna (1- fila))))
 			((eql (obtener-ficha tablero columna fila) ficha-oponente) 
 				0)
 			(t (contar-abajo-espacios tablero ficha ficha-oponente columna (1- fila))))
 		0))


(defun contar-arriba-espacios (tablero ficha ficha-oponente columna fila)
 	(if (dentro-del-tablero-p tablero columna fila)
 		(cond 
 			((eql (obtener-ficha tablero columna fila) ficha)
 				(1+ (contar-arriba-espacios tablero ficha ficha-oponente columna (1+ fila))))
 			((eql (obtener-ficha tablero columna fila) ficha-oponente) 
 				0)
 			(t (contar-abajo-espacios tablero ficha ficha-oponente columna (1+ fila))))
 		0))


(defun contar-derecha-espacios (tablero ficha ficha-oponente columna fila)
 	(if (dentro-del-tablero-p tablero columna fila)
 		(cond 
 			((eql (obtener-ficha tablero columna fila) ficha)
 				(1+ (contar-derecha-espacios tablero ficha ficha-oponente (1+ columna) fila)))
 			((eql (obtener-ficha tablero columna fila) ficha-oponente) 
 				0)
 			(t (contar-abajo-espacios tablero ficha ficha-oponente (1+ columna) fila)))
 		0))


(defun contar-izquierda-espacios (tablero ficha ficha-oponente columna fila)
 	(if (dentro-del-tablero-p tablero columna fila)
 		(cond 
 			((eql (obtener-ficha tablero columna fila) ficha)
 				(1+ (contar-izquierda-espacios tablero ficha ficha-oponente (1- columna) fila)))
 			((eql (obtener-ficha tablero columna fila) ficha-oponente) 
 				0)
 			(t (contar-abajo-espacios tablero ficha ficha-oponente (1- columna) fila)))
 		0))

(defun contar-abajo-derecha-espacios (tablero ficha ficha-oponente columna fila)
 	(if (dentro-del-tablero-p tablero columna fila)
 		(cond 
 			((eql (obtener-ficha tablero columna fila) ficha)
 				(1+ (contar-abajo-derecha-espacios tablero ficha ficha-oponente (1+ columna) (1- fila))))
 			((eql (obtener-ficha tablero columna fila) ficha-oponente) 
 				0)
 			(t (contar-abajo-espacios tablero ficha ficha-oponente (1+ columna) (1- fila))))
 		0))

(defun contar-abajo-izquierda-espacios (tablero ficha ficha-oponente columna fila)
 	(if (dentro-del-tablero-p tablero columna fila)
 		(cond 
 			((eql (obtener-ficha tablero columna fila) ficha)
 				(1+ (contar-abajo-izquierda-espacios tablero ficha ficha-oponente (1- columna) (1- fila))))
 			((eql (obtener-ficha tablero columna fila) ficha-oponente) 
 				0)
 			(t (contar-abajo-espacios tablero ficha ficha-oponente (1- columna) (1- fila))))
 		0))

(defun contar-arriba-derecha-espacios (tablero ficha ficha-oponente columna fila)
 	(if (dentro-del-tablero-p tablero columna fila)
 		(cond 
 			((eql (obtener-ficha tablero columna fila) ficha)
 				(1+ (contar-arriba-derecha-espacios tablero ficha ficha-oponente (1+ columna) (1+ fila))))
 			((eql (obtener-ficha tablero columna fila) ficha-oponente) 
 				0)
 			(t (contar-abajo-espacios tablero ficha ficha-oponente (1+ columna) (1+ fila))))
 		0))

(defun contar-arriba-izquierda-espacios (tablero ficha ficha-oponente columna fila)
 	(if (dentro-del-tablero-p tablero columna fila)
 		(cond 
 			((eql (obtener-ficha tablero columna fila) ficha)
 				(1+ (contar-arriba-izquierda-espacios tablero ficha ficha-oponente (1- columna) (1+ fila))))
 			((eql (obtener-ficha tablero columna fila) ficha-oponente) 
 				0)
 			(t (contar-abajo-espacios tablero ficha ficha-oponente (1- columna) (1+ fila))))
 		0))