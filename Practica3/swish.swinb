<div class="notebook">

<div class="nb-cell markdown" name="md2">
### Ejercicio 1
</div>

<div class="nb-cell program" name="p1">
duplica([], []).
duplica([X|T], [X, X|L]):-duplica(T, L).
</div>

<div class="nb-cell markdown" name="md1">
### Ejercicio 2
</div>

<div class="nb-cell program" name="p2">
concatena([], L, L).
concatena([X|L1], L2, [X|L3]):-concatena(L1, L2, L3).

invierte([], []).
invierte([H|T],L):-invierte(T,R),concatena(R,[H],L).
</div>

<div class="nb-cell markdown" name="md3">
### Ejercicio 3
Basta con llamar a función *invierte* creada anteriormente. La copiamos de nuevo pues, al estar en otro cuadro de programa, swish-prolog no lo detecta.
Si se llama con una variable no instanciada, genera la lista vacía, pero pulsando los botones *Next*, *10*, *100*... que aparecen, se muestran nuevos ejemplos con listas que incluyes posiciones de memoria, que son palíndromos. En nuestro ejemplo, generando 10 más:
```
X = []
X = [_1164]
X = [_1192, _1192]
X = [_1226, _1232, _1226]
X = [_1266, _1272, _1272, _1266]
X = [_1312, _1318, _1324, _1318, _1312]
X = [_1364, _1370, _1376, _1376, _1370, _1364]
X = [_1422, _1428, _1434, _1440, _1434, _1428, _1422]
X = [_1486, _1492, _1498, _1504, _1504, _1498, _1492, _1486]
X = [_832, _838, _844, _850, _856, _850, _844, _838, _832]
X = [_908, _914, _920, _926, _932, _932, _926, _920, _914, _908]
```
</div>

<div class="nb-cell program" name="p3">
concatena([], L, L).
concatena([X|L1], L2, [X|L3]):-concatena(L1, L2, L3).

invierte([], []).
invierte([H|T],L):-invierte(T,R),concatena(R,[H],L).

palindromo(L):-invierte(L, L).
</div>

<div class="nb-cell markdown" name="md4">
### Ejercicio 4
</div>

<div class="nb-cell program" name="p4">
concatena([], L, L).
concatena([X|L1], L2, [X|L3]):-concatena(L1, L2, L3).

divide([X|T],1,[X],T).
divide([X|T],N,L1,L2):-N2 is N-1, divide(T, N2, H, L2), concatena([X], H, L1).
</div>

</div>
