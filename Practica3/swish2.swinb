<div class="notebook">

<div class="nb-cell markdown" name="md1">
### Ejercicio 5

En el caso de ponerlo al reves, como *aplasta(R,  [a, b, c, d]).* la funci√≥n devuelve false, porque no es ninguno de los casos base
</div>

<div class="nb-cell program" name="p1">
aplasta([], []) :- !.
aplasta([X|T], Res) :-
    !,
    aplasta(X, L1),
    aplasta(T, L2),
    append(L1, L2, Res).
aplasta(L, [L]).


</div>

<div class="nb-cell markdown" name="md2">
### Ejercicio 6
Ejemplos: 
next_factor(5, 2, NF) 3, el caso base
next_factor(2, 5, NF) FALSE porque 5 &lt; sqrt(2)
next_factor(2, 1, NF) 3
next_factor(25, 3, NF) 5
next_factor(25, 5, NF) false

primos(1, []) true, el caso base
primos(4, [2, 2]) true
primos(4, [2, 3]) false
primos(63, [3, 3, 7]) true
primos(63, [3, 3, 8]) false
primos(63, L) [3, 3, 7]
primos(4, L) [2, 2]
</div>

<div class="nb-cell program" name="p2">
next_factor(_, 2, 3).
next_factor(N, F, NF):- F < sqrt(N), NF is F + 2.
next_factor(N, F, N):- F < N.

primos_aux(1, [], _).
primos_aux(N, [F|T], F) :- 
   	0 is mod(N, F),
    Nn is N/F,
    primos_aux(Nn, T, F), !.
    
primos_aux(N, L, F) :- 
   0 \= mod(N, F),
    next_factor(N, F, Fn),
    primos_aux(N, L, Fn).

primos(1, []).
primos(N, L) :-
    primos_aux(N, L, 2).
    
    
    


</div>

</div>
